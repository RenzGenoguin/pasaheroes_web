generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleType {
  id          Int      @id @default(autoincrement())
  vehicleType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Driver      Driver[]
}

model Driver {
  id            String      @id @default(cuid())
  profileUrl    String
  firstName     String
  lastName      String
  fullName      String
  plateNo       String
  licenceNo     String
  gender        Gender
  contactNo     String
  address       String
  vehicleTypeId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Comment       Comment[]
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])
  Rating        Rating[]
  Ride          Ride[]
}

model Pasahero {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  password         String
  profileUrl       String?
  firstName        String
  lastName         String
  fullName         String?
  gender           Gender
  emergencyContact String
  contactNo        String?
  address          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Comment          Comment[]
  Rating           Rating[]
  Ride             Ride[]

  @@index([firstName, lastName])
}

model Rating {
  id         Int       @id @default(autoincrement())
  rating     Float
  rideId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  driverId   String?
  pasaheroId Int?
  Driver     Driver?   @relation(fields: [driverId], references: [id])
  Pasahero   Pasahero? @relation(fields: [pasaheroId], references: [id])
  Ride       Ride?
}

model Comment {
  id         Int       @id @default(autoincrement())
  comment    String
  rideId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  driverId   String?
  pasaheroId Int?
  Driver     Driver?   @relation(fields: [driverId], references: [id])
  Pasahero   Pasahero? @relation(fields: [pasaheroId], references: [id])
  Ride       Ride?
}

model Ride {
  id         Int       @id @default(autoincrement())
  startRide  DateTime  @default(now())
  endRide    DateTime?
  startLong Float?
  startLat Float?
  endLong Float?
  endLat Float?
  driverId   String
  pasaheroId Int
  ratingId   Int?      @unique
  commentId  Int?      @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Comment    Comment?  @relation(fields: [commentId], references: [id])
  Driver     Driver    @relation(fields: [driverId], references: [id])
  Pasahero   Pasahero  @relation(fields: [pasaheroId], references: [id])
  Rating     Rating?   @relation(fields: [ratingId], references: [id])
}

enum Gender {
  Male
  Female
}
